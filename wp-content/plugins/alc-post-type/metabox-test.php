<?php

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class Rational_Meta_Box {
  private $screens = array(
    'alc',
  );
  private $fields = array(
    array(
      'id' => 'test-text',
      'label' => 'test-text',
      'type' => 'text',
    ),
    array(
      'id' => 'test-tel',
      'label' => 'test-tel',
      'type' => 'tel',
    ),
    array(
      'id' => 'test-email',
      'label' => 'test-email',
      'type' => 'email',
    ),
    array(
      'id' => 'test-media',
      'label' => 'test-media',
      'type' => 'media',
    ),
    array(
      'id' => 'test-date',
      'label' => 'test-date',
      'type' => 'date',
    ),
    array(
      'id' => 'test-checkbox',
      'label' => 'test-checkbox',
      'type' => 'checkbox',
    ),
    array(
      'id' => 'test-textarea',
      'label' => 'test-textarea',
      'type' => 'textarea',
    ),
    array(
      'id' => 'test-url',
      'label' => 'test-url',
      'type' => 'url',
    ),
    array(
      'id' => 'test-color',
      'label' => 'test-color',
      'type' => 'color',
    ),
  );

  /**
   * Class construct method. Adds actions to their respective WordPress hooks.
   */
  public function __construct() {
    add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
    add_action( 'admin_footer', array( $this, 'admin_footer' ) );
    add_action( 'save_post', array( $this, 'save_post' ) );
  }

  /**
   * Hooks into WordPress' add_meta_boxes function.
   * Goes through screens (post types) and adds the meta box.
   */
  public function add_meta_boxes() {
    foreach ( $this->screens as $screen ) {
      add_meta_box(
        'title-here',
        __( 'title-here', 'alc-test-text' ),
        array( $this, 'add_meta_box_callback' ),
        $screen,
        'advanced',
        'default'
      );
    }
  }

  /**
   * Generates the HTML for the meta box
   * 
   * @param object $post WordPress post object
   */
  public function add_meta_box_callback( $post ) {
    wp_nonce_field( 'title_here_data', 'title_here_nonce' );
    echo 'desc-here';
    $this->generate_fields( $post );
  }

  /**
   * Hooks into WordPress' admin_footer function.
   * Adds scripts for media uploader.
   */
  public function admin_footer() {
    ?><script>
      // https://codestag.com/how-to-use-wordpress-3-5-media-uploader-in-theme-options/
      jQuery(document).ready(function($){
        if ( typeof wp.media !== 'undefined' ) {
          var _custom_media = true,
          _orig_send_attachment = wp.media.editor.send.attachment;
          $('.rational-metabox-media').click(function(e) {
            var send_attachment_bkp = wp.media.editor.send.attachment;
            var button = $(this);
            var id = button.attr('id').replace('_button', '');
            _custom_media = true;
              wp.media.editor.send.attachment = function(props, attachment){
              if ( _custom_media ) {
                $("#"+id).val(attachment.url);
              } else {
                return _orig_send_attachment.apply( this, [props, attachment] );
              };
            }
            wp.media.editor.open(button);
            return false;
          });
          $('.add_media').on('click', function(){
            _custom_media = false;
          });
        }
      });
    </script><?php
  }

  /**
   * Generates the field's HTML for the meta box.
   */
  public function generate_fields( $post ) {
    $output = '';
    foreach ( $this->fields as $field ) {
      $label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
      $db_value = get_post_meta( $post->ID, 'title_here_' . $field['id'], true );
      switch ( $field['type'] ) {
        case 'checkbox':
          $input = sprintf(
            '<input %s id="%s" name="%s" type="checkbox" value="1">',
            $db_value === '1' ? 'checked' : '',
            $field['id'],
            $field['id']
          );
          break;
        case 'media':
          $input = sprintf(
            '<input class="regular-text" id="%s" name="%s" type="text" value="%s"> <input class="button rational-metabox-media" id="%s_button" name="%s_button" type="button" value="Upload" />',
            $field['id'],
            $field['id'],
            $db_value,
            $field['id'],
            $field['id']
          );
          break;
        case 'textarea':
          $input = sprintf(
            '<textarea class="large-text" id="%s" name="%s" rows="5">%s</textarea>',
            $field['id'],
            $field['id'],
            $db_value
          );
          break;
        default:
          $input = sprintf(
            '<input %s id="%s" name="%s" type="%s" value="%s">',
            $field['type'] !== 'color' ? 'class="regular-text"' : '',
            $field['id'],
            $field['id'],
            $field['type'],
            $db_value
          );
      }
      $output .= $this->row_format( $label, $input );
    }
    echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
  }

  /**
   * Generates the HTML for table rows.
   */
  public function row_format( $label, $input ) {
    return sprintf(
      '<tr><th scope="row">%s</th><td>%s</td></tr>',
      $label,
      $input
    );
  }
  /**
   * Hooks into WordPress' save_post function
   */
  public function save_post( $post_id ) {
    if ( ! isset( $_POST['title_here_nonce'] ) )
      return $post_id;

    $nonce = $_POST['title_here_nonce'];
    if ( !wp_verify_nonce( $nonce, 'title_here_data' ) )
      return $post_id;

    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
      return $post_id;

    foreach ( $this->fields as $field ) {
      if ( isset( $_POST[ $field['id'] ] ) ) {
        switch ( $field['type'] ) {
          case 'email':
            $_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
            break;
          case 'text':
            $_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
            break;
        }
        update_post_meta( $post_id, 'title_here_' . $field['id'], $_POST[ $field['id'] ] );
      } else if ( $field['type'] === 'checkbox' ) {
        update_post_meta( $post_id, 'title_here_' . $field['id'], '0' );
      }
    }
  }
}
new Rational_Meta_Box;

// =======================================================

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class alcProfileMetaboxGen {
  private $screens = array(
    'alc',
  );
  private $fields = array(
    array(
      'id' => 'name',
      'label' => __( 'Name', 'alc_text' ),
      'type' => 'text',
    ),
    array(
      'id' => 'description',
      'label' => __( 'Description', 'alc_text' ),
      'type' => 'textarea',
    ),
    array(
      'id' => 'address',
      'label' => __( 'Address', 'alc_text' ),
      'type' => 'text',
    ),
    array(
      'id' => 'website',
      'label' => __( 'Website', 'alc_text' ),
      'type' => 'url',
    ),
    array(
      'id' => 'age-range',
      'label' => __( 'Age Range', 'alc_text' ),
      'type' => 'text',
    ),
    array(
      'id' => 'enrollment-application-link',
      'label' => __( 'Enrollment Application Link', 'alc_text' ),
      'type' => 'url',
    ),
    array(
      'id' => 'date-of-establishment',
      'label' => __( 'Date of Establishment', 'alc_text' ),
      'type' => 'date',
    ),
    array(
      'id' => 'facebook',
      'label' => __( 'Facebook', 'alc_text' ),
      'type' => 'url',
    ),
    array(
      'id' => 'twitter',
      'label' => __( 'Twitter', 'alc_text' ),
      'type' => 'url',
    ),
  );

  /**
   * Class construct method. Adds actions to their respective WordPress hooks.
   */
  public function __construct() {
    add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
    add_action( 'save_post', array( $this, 'save_post' ) );
  }

  /**
   * Hooks into WordPress' add_meta_boxes function.
   * Goes through screens (post types) and adds the meta box.
   */
  public function add_meta_boxes() {
    foreach ( $this->screens as $screen ) {
      add_meta_box(
        'alc-profile',
        __( 'General Information', 'alc_text' ),
        array( $this, 'add_meta_box_callback' ),
        $screen,
        'normal',
        'high'
      );
    }
  }

  /**
   * Generates the HTML for the meta box
   * 
   * @param object $post WordPress post object
   */
  public function add_meta_box_callback( $post ) {
    wp_nonce_field( 'alc_profile_data', 'alc_profile_nonce' );
    echo 'Basic information about the ALC';
    $this->generate_fields( $post );
  }

  /**
   * Generates the field's HTML for the meta box.
   */
  public function generate_fields( $post ) {
    $output = '';
    foreach ( $this->fields as $field ) {
      $label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
      $db_value = get_post_meta( $post->ID, 'alc_profile_' . $field['id'], true );
      switch ( $field['type'] ) {
        case 'textarea':
          $input = sprintf(
            '<textarea class="large-text" id="%s" name="%s" rows="5">%s</textarea>',
            $field['id'],
            $field['id'],
            $db_value
          );
          break;
        default:
          $input = sprintf(
            '<input %s id="%s" name="%s" type="%s" value="%s">',
            $field['type'] !== 'color' ? 'class="regular-text"' : '',
            $field['id'],
            $field['id'],
            $field['type'],
            $db_value
          );
      }
      $output .= $this->row_format( $label, $input );
    }
    echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
  }

  /**
   * Generates the HTML for table rows.
   */
  public function row_format( $label, $input ) {
    return sprintf(
      '<tr><th scope="row">%s</th><td>%s</td></tr>',
      $label,
      $input
    );
  }
  /**
   * Hooks into WordPress' save_post function
   */
  public function save_post( $post_id ) {
    if ( ! isset( $_POST['alc_profile_nonce'] ) )
      return $post_id;

    $nonce = $_POST['alc_profile_nonce'];
    if ( !wp_verify_nonce( $nonce, 'alc_profile_data' ) )
      return $post_id;

    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
      return $post_id;

    foreach ( $this->fields as $field ) {
      if ( isset( $_POST[ $field['id'] ] ) ) {
        switch ( $field['type'] ) {
          case 'email':
            $_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
            break;
          case 'text':
            $_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
            break;
        }
        update_post_meta( $post_id, 'alc_profile_' . $field['id'], $_POST[ $field['id'] ] );
      } else if ( $field['type'] === 'checkbox' ) {
        update_post_meta( $post_id, 'alc_profile_' . $field['id'], '0' );
      }
    }
  }
}
// new alcProfileMetaboxGen;

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class alcMapMetabox {
  private $screens = array(
    'alc',
  );
  private $fields = array(
    array(
      'id' => 'on-map',
      'label' => __( 'On Map?', 'alc_text' ),
      'type' => 'checkbox',
    ),
    array(
      'id' => 'map-name',
      'label' => __( 'Map Name', 'alc_text' ),
      'type' => 'text',
    ),
    array(
      'id' => 'map-description',
      'label' => __( 'Map Description', 'alc_text' ),
      'type' => 'textarea',
    ),
    array(
      'id' => 'website',
      'label' => __( 'Website', 'alc_text' ),
      'type' => 'url',
    ),
    array(
      'id' => 'public-contact-address',
      'label' => __( 'Public Contact Address', 'alc_text' ),
      'type' => 'text',
    ),
    array(
      'id' => 'public-contact-name',
      'label' => __( 'Public Contact Name', 'alc_text' ),
      'type' => 'text',
    ),
    array(
      'id' => 'public-contact-email',
      'label' => __( 'Public Contact Email', 'alc_text' ),
      'type' => 'email',
    ),
    array(
      'id' => 'public-contact-phone',
      'label' => __( 'Public Contact Phone', 'alc_text' ),
      'type' => 'text',
    ),
  );

  /**
   * Class construct method. Adds actions to their respective WordPress hooks.
   */
  public function __construct() {
    add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
    add_action( 'save_post', array( $this, 'save_post' ) );
  }

  /**
   * Hooks into WordPress' add_meta_boxes function.
   * Goes through screens (post types) and adds the meta box.
   */
  public function add_meta_boxes() {
    foreach ( $this->screens as $screen ) {
      add_meta_box(
        'map-info',
        __( 'Map Info', 'alc_text' ),
        array( $this, 'add_meta_box_callback' ),
        $screen,
        'normal',
        'high'
      );
    }
  }

  /**
   * Generates the HTML for the meta box
   * 
   * @param object $post WordPress post object
   */
  public function add_meta_box_callback( $post ) {
    wp_nonce_field( 'map_info_data', 'map_info_nonce' );
    echo 'Public information that displays on map';
    $this->generate_fields( $post );
  }

  /**
   * Generates the field's HTML for the meta box.
   */
  public function generate_fields( $post ) {
    $output = '';
    foreach ( $this->fields as $field ) {
      $label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
      $db_value = get_post_meta( $post->ID, 'map_info_' . $field['id'], true );
      switch ( $field['type'] ) {
        case 'checkbox':
          $input = sprintf(
            '<input %s id="%s" name="%s" type="checkbox" value="1">',
            $db_value === '1' ? 'checked' : '',
            $field['id'],
            $field['id']
          );
          break;
        case 'textarea':
          $input = sprintf(
            '<textarea class="large-text" id="%s" name="%s" rows="5">%s</textarea>',
            $field['id'],
            $field['id'],
            $db_value
          );
          break;
        default:
          $input = sprintf(
            '<input %s id="%s" name="%s" type="%s" value="%s">',
            $field['type'] !== 'color' ? 'class="regular-text"' : '',
            $field['id'],
            $field['id'],
            $field['type'],
            $db_value
          );
      }
      $output .= $this->row_format( $label, $input );
    }
    echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
  }

  /**
   * Generates the HTML for table rows.
   */
  public function row_format( $label, $input ) {
    return sprintf(
      '<tr><th scope="row">%s</th><td>%s</td></tr>',
      $label,
      $input
    );
  }
  /**
   * Hooks into WordPress' save_post function
   */
  public function save_post( $post_id ) {
    if ( ! isset( $_POST['map_info_nonce'] ) )
      return $post_id;

    $nonce = $_POST['map_info_nonce'];
    if ( !wp_verify_nonce( $nonce, 'map_info_data' ) )
      return $post_id;

    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
      return $post_id;

    foreach ( $this->fields as $field ) {
      if ( isset( $_POST[ $field['id'] ] ) ) {
        switch ( $field['type'] ) {
          case 'email':
            $_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
            break;
          case 'text':
            $_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
            break;
        }
        update_post_meta( $post_id, 'map_info_' . $field['id'], $_POST[ $field['id'] ] );
      } else if ( $field['type'] === 'checkbox' ) {
        update_post_meta( $post_id, 'map_info_' . $field['id'], '0' );
      }
    }
  }
}
// new alcMapMetabox;

/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 */
class alcMembership {
  private $screens = array(
    'alc',
  );
  private $fields = array(
    array(
      'id' => 'last-payment-date',
      'label' => __( 'Last Payment Date', 'alc_text' ),
      'type' => 'date',
    ),
    array(
      'id' => 'network-holder',
      'label' => __( 'Network Holder', 'alc_text' ),
      'type' => 'text',
    ),
    array(
      'id' => 'start-date',
      'label' => __( 'Start Date', 'alc_text' ),
      'type' => 'text',
    ),
  );

  /**
   * Class construct method. Adds actions to their respective WordPress hooks.
   */
  public function __construct() {
    add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
    add_action( 'save_post', array( $this, 'save_post' ) );
  }

  /**
   * Hooks into WordPress' add_meta_boxes function.
   * Goes through screens (post types) and adds the meta box.
   */
  public function add_meta_boxes() {
    foreach ( $this->screens as $screen ) {
      add_meta_box(
        'alc-membership',
        __( 'ALC Membership', 'alc_text' ),
        array( $this, 'add_meta_box_callback' ),
        $screen,
        'side',
        'high'
      );
    }
  }

  /**
   * Generates the HTML for the meta box
   * 
   * @param object $post WordPress post object
   */
  public function add_meta_box_callback( $post ) {
    wp_nonce_field( 'alc_membership_data', 'alc_membership_nonce' );
    echo 'ALC Membership Information';
    $this->generate_fields( $post );
  }

  /**
   * Generates the field's HTML for the meta box.
   */
  public function generate_fields( $post ) {
    $output = '';
    foreach ( $this->fields as $field ) {
      $label = '<label for="' . $field['id'] . '">' . $field['label'] . '</label>';
      $db_value = get_post_meta( $post->ID, 'alc_membership_' . $field['id'], true );
      switch ( $field['type'] ) {
        default:
          $input = sprintf(
            '<input id="%s" name="%s" type="%s" value="%s">',
            $field['id'],
            $field['id'],
            $field['type'],
            $db_value
          );
      }
      $output .= '<p>' . $label . '<br>' . $input . '</p>';
    }
    echo $output;
  }

  /**
   * Hooks into WordPress' save_post function
   */
  public function save_post( $post_id ) {
    if ( ! isset( $_POST['alc_membership_nonce'] ) )
      return $post_id;

    $nonce = $_POST['alc_membership_nonce'];
    if ( !wp_verify_nonce( $nonce, 'alc_membership_data' ) )
      return $post_id;

    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
      return $post_id;

    foreach ( $this->fields as $field ) {
      if ( isset( $_POST[ $field['id'] ] ) ) {
        switch ( $field['type'] ) {
          case 'email':
            $_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
            break;
          case 'text':
            $_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
            break;
        }
        update_post_meta( $post_id, 'alc_membership_' . $field['id'], $_POST[ $field['id'] ] );
      } else if ( $field['type'] === 'checkbox' ) {
        update_post_meta( $post_id, 'alc_membership_' . $field['id'], '0' );
      }
    }
  }
}
// new alcMembership;